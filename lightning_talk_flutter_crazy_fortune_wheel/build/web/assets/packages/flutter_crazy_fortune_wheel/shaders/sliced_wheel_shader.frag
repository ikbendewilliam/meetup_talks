{
  "sksl": {
    "entrypoint": "sliced_wheel_shader_fragment_main",
    "shader": "// This SkSL shader is autogenerated by spirv-cross.\n\nfloat4 flutter_FragCoord;\n\nuniform vec2 resolution;\nuniform float iTime;\nuniform shader imageTexture;\nuniform half2 imageTexture_size;\n\nvec4 fragColor;\n\nvec2 FLT_flutter_local_FlutterFragCoord()\n{\n    return flutter_FragCoord.xy;\n}\n\nfloat FLT_flutter_local_angleStart(float i)\n{\n    return (6.283185482025146484375 * i) * iTime;\n}\n\nmat2 FLT_flutter_local_rotationMatrix(float angle)\n{\n    float c = cos(angle);\n    float s = sin(angle);\n    return mat2(vec2(c, -s), vec2(s, c));\n}\n\nfloat FLT_flutter_local_atan2(float y, float x)\n{\n    return mod(atan(y, x) + 6.283185482025146484375, 6.283185482025146484375);\n}\n\nfloat FLT_flutter_local_smoothStep2(float edge, float x)\n{\n    return smoothstep(edge - 0.0040000001899898052215576171875, edge + 0.0040000001899898052215576171875, x);\n}\n\nfloat FLT_flutter_local_arc(vec2 uv, float rMin, float rMax, inout float aMin, inout float aMax)\n{\n    float r = length(uv);\n    float param = uv.y;\n    float param_1 = uv.x;\n    float a = FLT_flutter_local_atan2(param, param_1);\n    aMin = mod(aMin, 6.283185482025146484375);\n    aMax = mod(aMax, 6.283185482025146484375);\n    float minGtMax = step(aMax, aMin);\n    a += ((step(a, aMax) * minGtMax) * 6.283185482025146484375);\n    aMax += (minGtMax * 6.283185482025146484375);\n    float param_2 = rMin;\n    float param_3 = r;\n    float param_4 = r;\n    float param_5 = rMax;\n    return ((FLT_flutter_local_smoothStep2(param_2, param_3) * FLT_flutter_local_smoothStep2(param_4, param_5)) * step(aMin, a)) * step(a, aMax);\n}\n\nvoid FLT_main()\n{\n    vec2 uv_1 = FLT_flutter_local_FlutterFragCoord() / resolution;\n    vec2 centeredUV = (uv_1 - vec2(0.5)) * 2.0;\n    vec4 texColor = imageTexture.eval(imageTexture_size * ( uv_1));\n    fragColor = vec4(0.0);\n    float rMin_1 = 0.0500000007450580596923828125;\n    float ringWidth = (1.0 - rMin_1) / 9.0;\n    for (int i = 0; i < 8; i++)\n    {\n        rMin_1 += ringWidth;\n        float param_6 = float(i);\n        float start = FLT_flutter_local_angleStart(param_6);\n        float param_7 = start;\n        vec2 rotatedUV = FLT_flutter_local_rotationMatrix(param_7) * centeredUV;\n        vec2 rotatedTextureUV = (rotatedUV * 0.5) + vec2(0.5);\n        vec4 texColor_1 = imageTexture.eval(imageTexture_size * ( rotatedTextureUV));\n        vec2 param_8 = centeredUV;\n        float param_9 = rMin_1;\n        float param_10 = rMin_1 + ringWidth;\n        float param_11 = 0.0;\n        float param_12 = 6.283185482025146484375;\n        float _224 = FLT_flutter_local_arc(param_8, param_9, param_10, param_11, param_12);\n        float add = _224;\n        fragColor += (texColor_1 * add);\n    }\n}\n\nhalf4 main(float2 iFragCoord)\n{\n      flutter_FragCoord = float4(iFragCoord, 0, 0);\n      FLT_main();\n      return fragColor;\n}\n",
    "stage": 1,
    "uniforms": [
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 0,
        "name": "resolution",
        "rows": 2,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 1,
        "name": "iTime",
        "rows": 1,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 0,
        "columns": 1,
        "location": 2,
        "name": "imageTexture",
        "rows": 1,
        "type": 12
      }
    ]
  }
}